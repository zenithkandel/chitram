<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>चित्रम् - Artworks Management</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f7fa;
            color: #333;
            overflow-x: hidden;
        }

        /* Sidebar styles - same as dashboard */
        .sidebar {
            position: fixed;
            left: -280px;
            top: 0;
            width: 280px;
            height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            z-index: 1000;
            transition: left 0.3s ease;
            overflow-y: auto;
        }

        .sidebar.active {
            left: 0;
        }

        .sidebar-header {
            padding: 2rem 1.5rem;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar-header h2 {
            color: white;
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
        }

        .sidebar-header p {
            color: rgba(255,255,255,0.8);
            font-size: 0.9rem;
        }

        .sidebar-nav {
            padding: 1rem 0;
        }

        .nav-item {
            margin: 0.5rem 0;
        }

        .nav-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1.5rem;
            color: rgba(255,255,255,0.9);
            text-decoration: none;
            transition: all 0.3s ease;
            border-left: 3px solid transparent;
        }

        .nav-link:hover {
            background: rgba(255,255,255,0.1);
            border-left-color: white;
            color: white;
        }

        .nav-link.active {
            background: rgba(255,255,255,0.15);
            border-left-color: white;
            color: white;
        }

        .nav-icon {
            width: 20px;
            height: 20px;
            margin-right: 0.75rem;
            font-size: 1.2rem;
        }

        /* Main content */
        .main-content {
            margin-left: 0;
            transition: margin-left 0.3s ease;
            min-height: 100vh;
        }

        .header {
            background: white;
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .menu-toggle {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #333;
            padding: 0.5rem;
        }

        .header-title {
            font-size: 1.5rem;
            color: #333;
            flex: 1;
            text-align: center;
        }

        .logout-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            transition: opacity 0.3s;
            font-size: 0.9rem;
        }

        .logout-btn:hover {
            opacity: 0.9;
        }

        /* Artworks content */
        .artworks-content {
            padding: 1.5rem;
        }

        .artworks-header {
            margin-bottom: 2rem;
        }

        .artists-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .artists-stats-section {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .stats-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .stats-title {
            font-size: 1.2rem;
            color: #333;
            font-weight: 600;
        }

        .add-artwork-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: opacity 0.3s;
        }

        .add-artwork-btn:hover {
            opacity: 0.9;
        }

        .stat-card {
            background: #f8f9ff;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
        }

        .stat-number {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }

        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            font-weight: 500;
        }

        .alert.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .artworks-container {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .artworks-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .artwork-card {
            background: #f8f9ff;
            border-radius: 10px;
            padding: 1.5rem;
            transition: all 0.3s ease;
            border: 1px solid #e1e8ed;
        }

        .artwork-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .artwork-image {
            width: 100%;
            height: 180px;
            background: #f0f2f5;
            border-radius: 8px;
            margin-bottom: 1rem;
            overflow: hidden;
            position: relative;
        }

        .artwork-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .artwork-image.no-image {
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
            font-size: 1rem;
            background: #f0f2f5;
        }

        .artwork-info h3 {
            color: #333;
            font-size: 1.2rem;
            margin-bottom: 0.75rem;
            font-weight: 600;
        }

        .artwork-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.75rem;
            margin-bottom: 1rem;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
        }

        .detail-label {
            font-size: 0.8rem;
            color: #666;
            font-weight: 500;
            margin-bottom: 0.25rem;
        }

        .detail-value {
            font-weight: 600;
            color: #333;
            font-size: 0.9rem;
        }

        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 15px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-listed { background: #e8f5e8; color: #2e7d32; }
        .status-ordered { background: #fff3e0; color: #f57c00; }
        .status-sold { background: #e3f2fd; color: #1976d2; }
        .status-delivered { background: #f3e5f5; color: #7b1fa2; }

        .artwork-actions {
            display: flex;
            gap: 0.75rem;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #e1e8ed;
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.85rem;
            flex: 1;
            justify-content: center;
        }

        .btn-edit {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-delete {
            background: #dc3545;
            color: white;
        }

        .btn:hover {
            opacity: 0.9;
        }

        /* Desktop sidebar active state */
        @media (min-width: 769px) {
            .main-content {
                margin-left: 280px;
            }
            
            .sidebar {
                left: 0;
            }
            
            .menu-toggle {
                display: none;
            }
        }

        /* Mobile styles */
        @media (max-width: 768px) {
            .artworks-content {
                padding: 1rem;
            }

            .artists-stats {
                grid-template-columns: repeat(2, 1fr);
                gap: 0.75rem;
            }

            .artworks-grid {
                grid-template-columns: 1fr;
            }

            .header-title {
                font-size: 1.2rem;
            }
        }

        /* Overlay for mobile sidebar */
        .sidebar-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 999;
        }

        .sidebar-overlay.active {
            display: block;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            z-index: 1000;
            backdrop-filter: blur(3px);
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .modal-content {
            background: white;
            padding: 2rem;
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
            animation: slideUp 0.3s ease;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        @keyframes slideUp {
            from { transform: translateY(30px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e1e8ed;
        }

        .modal-header h2 {
            color: #2c3e50;
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
            padding: 0.5rem;
            border-radius: 50%;
            transition: all 0.3s ease;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .close-btn:hover {
            background: #f0f2f5;
            color: #333;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #2c3e50;
            font-size: 0.9rem;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #e1e8ed;
            border-radius: 8px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            background: #f8f9ff;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            background: white;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .image-upload {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .image-preview {
            width: 100%;
            height: 150px;
            background: #f8f9ff;
            border: 2px dashed #e1e8ed;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: 0.5rem;
            overflow: hidden;
        }

        .image-preview img {
            max-width: 100%;
            max-height: 100%;
            object-fit: cover;
        }

        .image-preview.empty {
            color: #666;
            font-size: 0.9rem;
        }

        .progress-container {
            display: none;
            margin: 1.5rem 0;
        }

        .progress-container.active {
            display: block;
        }

        .progress-bar {
            width: 100%;
            height: 6px;
            background: #e1e8ed;
            border-radius: 3px;
            overflow: hidden;
            margin-bottom: 0.75rem;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 3px;
            width: 0%;
            transition: width 0.3s ease;
        }

        .progress-fill.animated {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #667eea 100%);
            background-size: 200% 200%;
            animation: gradientShift 1.5s ease-in-out infinite;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .progress-text {
            text-align: center;
            font-weight: 500;
            color: #666;
            font-size: 0.85rem;
        }

        .update-status {
            padding: 0.75rem;
            border-radius: 8px;
            margin-top: 0.75rem;
            font-weight: 500;
            display: none;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.85rem;
        }

        .update-status.active {
            display: flex;
        }

        .update-status.success {
            background: #d4edda;
            color: #155724;
        }

        .update-status.error {
            background: #f8d7da;
            color: #721c24;
        }

        .update-status.uploading,
        .update-status.processing {
            background: #e3f2fd;
            color: #1976d2;
        }

        .loading-spinner {
            width: 14px;
            height: 14px;
            border: 2px solid #e1e8ed;
            border-top: 2px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .modal-actions {
            display: flex;
            gap: 1rem;
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 1px solid #e1e8ed;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            flex: 1;
            padding: 0.75rem;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn-secondary {
            background: #f0f2f5;
            color: #666;
            flex: 1;
            padding: 0.75rem;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-primary:hover,
        .btn-secondary:hover {
            transform: translateY(-1px);
        }

        .btn-primary:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        .spinner {
            display: none;
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .header {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
                padding: 1rem;
            }

            .header h1 {
                font-size: 1.5rem;
            }

            .stats-container {
                padding: 1.5rem;
            }

            .artworks-stats {
                grid-template-columns: repeat(2, 1fr);
                gap: 1rem;
            }

            .artworks-grid {
                grid-template-columns: 1fr;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .modal-content {
                width: 95%;
                padding: 1.5rem;
                margin: 1rem;
            }

            .modal-header h2 {
                font-size: 1.25rem;
            }
        }

        @media (max-width: 480px) {
            .artworks-stats {
                grid-template-columns: 1fr;
            }

            .stats-header {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .artwork-actions {
                flex-direction: column;
            }

            .modal-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h2>चित्रम्</h2>
            <p>Art Management System</p>
        </div>
        <nav class="sidebar-nav">
            <div class="nav-item">
                <a href="/admin/dashboard" class="nav-link">
                    <span class="nav-icon">📊</span>
                    Dashboard
                </a>
            </div>
            <div class="nav-item">
                <a href="/admin/artists" class="nav-link">
                    <span class="nav-icon">👨‍🎨</span>
                    Artists
                </a>
            </div>
            <div class="nav-item">
                <a href="/admin/artworks" class="nav-link active">
                    <span class="nav-icon">🎨</span>
                    Artworks
                </a>
            </div>
            <div class="nav-item">
                <a href="/admin/orders" class="nav-link">
                    <span class="nav-icon">📦</span>
                    Orders
                </a>
            </div>
            <div class="nav-item">
                <a href="/admin/messages" class="nav-link">
                    <span class="nav-icon">📧</span>
                    Messages
                </a>
            </div>
            <div class="nav-item">
                <a href="/admin/applications" class="nav-link">
                    <span class="nav-icon">📝</span>
                    Applications
                </a>
            </div>
        </nav>
    </div>

    <!-- Overlay for mobile -->
    <div class="sidebar-overlay" id="sidebarOverlay"></div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <header class="header">
            <button class="menu-toggle" id="menuToggle">☰</button>
            <h1 class="header-title">🎨 Artworks Management</h1>
            <a href="/admin/logout" class="logout-btn">Logout</a>
        </header>

        <!-- Artworks Content -->
        <div class="artworks-content">
            <% if (error) { %>
                <div class="alert error" id="errorAlert">
                    <%= error %>
                </div>
            <% } %>

            <% if (success) { %>
                <div class="alert success" id="successAlert">
                    <%= success %>
                </div>
            <% } %>

            <!-- Artworks Stats -->
            <div class="artists-stats-section">
                <div class="stats-header">
                    <h2 class="stats-title">Artworks Overview</h2>
                    <button class="add-artwork-btn" onclick="openAddArtworkModal()">
                        + Add New Artwork
                    </button>
                </div>

                <div class="artists-stats">
                    <div class="stat-card">
                        <div class="stat-number"><%= artworks.filter(a => a.status === 'listed').length %></div>
                        <div class="stat-label">Listed Artworks</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number"><%= artworks.filter(a => a.status === 'ordered').length %></div>
                        <div class="stat-label">Ordered Artworks</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number"><%= artworks.filter(a => a.status === 'sold').length %></div>
                        <div class="stat-label">Sold Artworks</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number"><%= artworks.length %></div>
                        <div class="stat-label">Total Artworks</div>
                    </div>
                </div>
            </div>

            <!-- Artworks Grid -->
            <div class="artworks-container">
                <div class="artworks-grid">
                    <% if (artworks.length === 0) { %>
                        <div class="artwork-card" style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
                            <h3 style="color: #666; margin-bottom: 1rem;">No artworks found</h3>
                            <p style="color: #999;">Start by adding your first artwork!</p>
                        </div>
                    <% } else { %>
                        <% artworks.forEach(artwork => { %>
                            <div class="artwork-card" data-id="<%= artwork.unique_id %>">
                                <div class="artwork-image <%= artwork.art_image ? '' : 'no-image' %>">
                                    <% if (artwork.art_image) { %>
                                        <img src="/uploads/artworks/<%= artwork.art_image %>" alt="<%= artwork.art_name %>">
                                    <% } else { %>
                                        🖼️ No Image
                                    <% } %>
                                </div>
                                
                                <div class="artwork-info">
                                    <h3><%= artwork.art_name %></h3>
                                    
                                    <div class="artwork-details">
                                        <div class="detail-item">
                                            <span class="detail-label">Artist</span>
                                            <span class="detail-value"><%= artwork.artist_name || 'Unknown' %></span>
                                        </div>
                                        <div class="detail-item">
                                            <span class="detail-label">Category</span>
                                            <span class="detail-value"><%= artwork.art_category %></span>
                                        </div>
                                        <div class="detail-item">
                                            <span class="detail-label">Price</span>
                                            <span class="detail-value">Rs. <%= Number(artwork.cost).toLocaleString() %></span>
                                        </div>
                                        <div class="detail-item">
                                            <span class="detail-label">Status</span>
                                            <span class="status-badge status-<%= artwork.status %>"><%= artwork.status %></span>
                                        </div>
                                        <div class="detail-item">
                                            <span class="detail-label">Size</span>
                                            <span class="detail-value"><%= artwork.size_of_art || 'N/A' %></span>
                                        </div>
                                        <div class="detail-item">
                                            <span class="detail-label">Color Type</span>
                                            <span class="detail-value"><%= artwork.color_type === 'black_and_white' ? 'B&W' : 'Color' %></span>
                                        </div>
                                    </div>
                                    
                                    <% if (artwork.art_description) { %>
                                        <p style="margin: 0.75rem 0; color: #666; font-size: 0.85rem; line-height: 1.4;">
                                            <%= artwork.art_description.substring(0, 100) %><%= artwork.art_description.length > 100 ? '...' : '' %>
                                        </p>
                                    <% } %>
                                </div>

                                <div class="artwork-actions">
                                    <button class="btn btn-edit" onclick="editArtwork('<%= artwork.unique_id %>')">
                                        ✏️ Edit
                                    </button>
                                    <button class="btn btn-delete" onclick="deleteArtwork('<%= artwork.unique_id %>', '<%= artwork.art_name %>')">
                                        🗑️ Delete
                                    </button>
                                </div>
                            </div>
                        <% }); %>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Artwork Modal -->
    <div id="editArtworkModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Edit Artwork</h2>
                <button class="close-btn" onclick="closeEditArtworkModal()">&times;</button>
            </div>
            
            <form id="editArtworkForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="edit_art_name">Artwork Name *</label>
                        <input type="text" id="edit_art_name" name="art_name" required>
                    </div>
                    <div class="form-group">
                        <label for="edit_artist_unique_id">Artist *</label>
                        <select id="edit_artist_unique_id" name="artist_unique_id" required>
                            <option value="">Loading artists...</option>
                        </select>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="edit_art_category">Category *</label>
                        <select id="edit_art_category" name="art_category" required>
                            <option value="">Select Category</option>
                            <option value="Landscape">Landscape</option>
                            <option value="Portrait">Portrait</option>
                            <option value="Abstract">Abstract</option>
                            <option value="Still Life">Still Life</option>
                            <option value="Traditional">Traditional</option>
                            <option value="Modern">Modern</option>
                            <option value="Digital">Digital</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="edit_cost">Price (Rs.) *</label>
                        <input type="number" id="edit_cost" name="cost" min="0" step="0.01" required>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="edit_size_of_art">Size of Art</label>
                        <input type="text" id="edit_size_of_art" name="size_of_art" placeholder="e.g., 16x20 inches">
                    </div>
                    <div class="form-group">
                        <label for="edit_work_hours">Work Hours</label>
                        <input type="text" id="edit_work_hours" name="work_hours" placeholder="e.g., 15-20 hours">
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="edit_color_type">Color Type *</label>
                        <select id="edit_color_type" name="color_type" required>
                            <option value="color">Color</option>
                            <option value="black_and_white">Black & White</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="edit_status">Status</label>
                        <select id="edit_status" name="status">
                            <option value="listed">Listed</option>
                            <option value="ordered">Ordered</option>
                            <option value="sold">Sold</option>
                            <option value="delivered">Delivered</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label for="edit_art_description">Description</label>
                    <textarea id="edit_art_description" name="art_description" rows="3" placeholder="Describe the artwork..."></textarea>
                </div>

                <div class="image-upload">
                    <label for="edit_art_image">Artwork Image</label>
                    <input type="file" id="edit_art_image" name="art_image" accept="image/*" onchange="previewEditArtworkImage(this)">
                    <div id="editImagePreview" class="image-preview empty">
                        <span>No image selected</span>
                        <img id="editPreviewImage" style="display: none;">
                    </div>
                </div>

                <div id="updateProgressContainer" class="progress-container">
                    <div class="progress-bar">
                        <div id="updateProgressBar" class="progress-fill"></div>
                    </div>
                    <div id="updateProgressText" class="progress-text">0% Complete</div>
                    <div id="updateStatus" class="update-status"></div>
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn-secondary" id="editCancelBtn" onclick="closeEditArtworkModal()">Cancel</button>
                    <button type="submit" class="btn-primary" id="updateArtworkBtn">
                        <span id="editBtnText">Update Artwork</span>
                        <span id="editBtnSpinner" class="loading-spinner" style="display: none;"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Add Artwork Modal -->
    <div id="addArtworkModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Add New Artwork</h2>
                <button class="close-btn" onclick="closeAddArtworkModal()">&times;</button>
            </div>
            
            <form id="addArtworkForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="add_art_name">Artwork Name *</label>
                        <input type="text" id="add_art_name" name="art_name" required>
                    </div>
                    <div class="form-group">
                        <label for="add_artist_unique_id">Artist *</label>
                        <select id="add_artist_unique_id" name="artist_unique_id" required>
                            <option value="">Loading artists...</option>
                        </select>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="add_art_category">Category *</label>
                        <select id="add_art_category" name="art_category" required>
                            <option value="">Select Category</option>
                            <option value="Landscape">Landscape</option>
                            <option value="Portrait">Portrait</option>
                            <option value="Abstract">Abstract</option>
                            <option value="Still Life">Still Life</option>
                            <option value="Traditional">Traditional</option>
                            <option value="Modern">Modern</option>
                            <option value="Digital">Digital</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="add_cost">Price (Rs.) *</label>
                        <input type="number" id="add_cost" name="cost" min="0" step="0.01" required>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="add_size_of_art">Size of Art</label>
                        <input type="text" id="add_size_of_art" name="size_of_art" placeholder="e.g., 16x20 inches">
                    </div>
                    <div class="form-group">
                        <label for="add_work_hours">Work Hours</label>
                        <input type="text" id="add_work_hours" name="work_hours" placeholder="e.g., 15-20 hours">
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="add_color_type">Color Type *</label>
                        <select id="add_color_type" name="color_type" required>
                            <option value="color">Color</option>
                            <option value="black_and_white">Black & White</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="add_status">Status</label>
                        <select id="add_status" name="status">
                            <option value="listed">Listed</option>
                            <option value="ordered">Ordered</option>
                            <option value="sold">Sold</option>
                            <option value="delivered">Delivered</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label for="add_art_description">Description</label>
                    <textarea id="add_art_description" name="art_description" rows="3" placeholder="Describe the artwork..."></textarea>
                </div>

                <div class="image-upload">
                    <label for="add_art_image">Artwork Image *</label>
                    <input type="file" id="add_art_image" name="art_image" accept="image/*" required onchange="previewAddArtworkImage(this)">
                    <div id="addImagePreview" class="image-preview empty">
                        <span>No image selected</span>
                        <img id="addPreviewImage" style="display: none;">
                    </div>
                </div>

                <div id="addProgressContainer" class="progress-container">
                    <div class="progress-bar">
                        <div id="addProgressBar" class="progress-fill"></div>
                    </div>
                    <div id="addProgressText" class="progress-text">0% Complete</div>
                    <div id="addStatus" class="update-status"></div>
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn-secondary" id="addCancelBtn" onclick="closeAddArtworkModal()">Cancel</button>
                    <button type="submit" class="btn-primary" id="addArtworkBtn">
                        <span id="addBtnText">Add Artwork</span>
                        <span id="addBtnSpinner" class="loading-spinner" style="display: none;"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Auto-hide alerts
        setTimeout(() => {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                if (alert) {
                    alert.style.opacity = '0';
                    alert.style.transform = 'translateY(-20px)';
                    setTimeout(() => alert.remove(), 300);
                }
            });
        }, 5000);

        // Global variables
        let currentArtworkId = null;

        // Load artists for dropdowns
        async function loadArtists() {
            try {
                const response = await fetch('/admin/artworks/api/artists');
                const data = await response.json();
                
                if (data.artists) {
                    const editSelect = document.getElementById('edit_artist_unique_id');
                    const addSelect = document.getElementById('add_artist_unique_id');
                    
                    // Clear existing options
                    editSelect.innerHTML = '<option value="">Select Artist</option>';
                    addSelect.innerHTML = '<option value="">Select Artist</option>';
                    
                    // Add artist options
                    data.artists.forEach(artist => {
                        const option1 = new Option(artist.full_name, artist.unique_id);
                        const option2 = new Option(artist.full_name, artist.unique_id);
                        editSelect.add(option1);
                        addSelect.add(option2);
                    });
                } else {
                    console.error('No artists found');
                }
            } catch (error) {
                console.error('Error loading artists:', error);
            }
        }

        // Load artists on page load
        document.addEventListener('DOMContentLoaded', loadArtists);

        // Edit artwork function
        async function editArtwork(artworkId) {
            currentArtworkId = artworkId;
            
            try {
                const response = await fetch(`/admin/artworks/${artworkId}`);
                const data = await response.json();
                
                if (data.artwork) {
                    const artwork = data.artwork;
                    
                    // Fill form fields
                    document.getElementById('edit_art_name').value = artwork.art_name || '';
                    document.getElementById('edit_artist_unique_id').value = artwork.artist_unique_id || '';
                    document.getElementById('edit_art_category').value = artwork.art_category || '';
                    document.getElementById('edit_cost').value = artwork.cost || '';
                    document.getElementById('edit_size_of_art').value = artwork.size_of_art || '';
                    document.getElementById('edit_work_hours').value = artwork.work_hours || '';
                    document.getElementById('edit_color_type').value = artwork.color_type || 'color';
                    document.getElementById('edit_status').value = artwork.status || 'listed';
                    document.getElementById('edit_art_description').value = artwork.art_description || '';
                    
                    // Show existing image if available
                    const preview = document.getElementById('editImagePreview');
                    const previewImage = document.getElementById('editPreviewImage');
                    
                    if (artwork.art_image) {
                        previewImage.src = `/uploads/artworks/${artwork.art_image}`;
                        previewImage.style.display = 'block';
                        preview.classList.remove('empty');
                        preview.querySelector('span').style.display = 'none';
                    } else {
                        previewImage.style.display = 'none';
                        preview.classList.add('empty');
                        preview.querySelector('span').style.display = 'block';
                        preview.querySelector('span').textContent = 'No image available';
                    }
                    
                    // Show modal
                    document.getElementById('editArtworkModal').classList.add('active');
                } else {
                    showAlert('Error loading artwork data', 'error');
                }
            } catch (error) {
                console.error('Error fetching artwork:', error);
                showAlert('Error loading artwork data', 'error');
            }
        }

        function closeEditArtworkModal() {
            document.getElementById('editArtworkModal').classList.remove('active');
            hideUpdateProgress();
        }

        function previewEditArtworkImage(input) {
            const preview = document.getElementById('editImagePreview');
            const previewImage = document.getElementById('editPreviewImage');
            
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    previewImage.src = e.target.result;
                    previewImage.style.display = 'block';
                    preview.classList.remove('empty');
                    preview.querySelector('span').style.display = 'none';
                };
                
                reader.readAsDataURL(input.files[0]);
            } else {
                previewImage.style.display = 'none';
                preview.classList.add('empty');
                preview.querySelector('span').style.display = 'block';
                preview.querySelector('span').textContent = 'No image selected';
            }
        }

        // Handle edit artwork form submission
        document.getElementById('editArtworkForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            if (!currentArtworkId) {
                showAlert('No artwork selected for editing', 'error');
                return;
            }
            
            // Show progress bar and disable form
            showUpdateProgress();
            
            // Create FormData object to handle file upload
            const formData = new FormData();
            formData.append('art_name', document.getElementById('edit_art_name').value);
            formData.append('artist_unique_id', document.getElementById('edit_artist_unique_id').value);
            formData.append('art_category', document.getElementById('edit_art_category').value);
            formData.append('cost', document.getElementById('edit_cost').value);
            formData.append('size_of_art', document.getElementById('edit_size_of_art').value);
            formData.append('work_hours', document.getElementById('edit_work_hours').value);
            formData.append('color_type', document.getElementById('edit_color_type').value);
            formData.append('status', document.getElementById('edit_status').value);
            formData.append('art_description', document.getElementById('edit_art_description').value);
            
            // Add artwork image file if selected
            const artworkImageFile = document.getElementById('edit_art_image').files[0];
            if (artworkImageFile) {
                formData.append('art_image', artworkImageFile);
                updateProgressStatus('uploading', 'Uploading artwork image...');
            } else {
                updateProgressStatus('processing', 'Updating artwork...');
            }

            // Simulate progress steps
            updateProgress(20);
            
            setTimeout(() => {
                updateProgress(50);
                
                fetch(`/admin/artworks/${currentArtworkId}`, {
                    method: 'PUT',
                    body: formData
                })
                .then(response => {
                    updateProgress(80);
                    return response.json();
                })
                .then(data => {
                    updateProgress(100);
                    updateProgressStatus('success', 'Artwork updated successfully!');
                    
                    setTimeout(() => {
                        if (data.success) {
                            showAlert(data.success, 'success');
                            closeEditArtworkModal();
                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        } else {
                            hideUpdateProgress();
                            showAlert(data.error || 'Error updating artwork', 'error');
                        }
                    }, 500);
                })
                .catch(error => {
                    console.error('Error updating artwork:', error);
                    hideUpdateProgress();
                    showAlert('Error updating artwork', 'error');
                });
            }, 300);
        });

        // Progress bar functions
        function showUpdateProgress() {
            document.getElementById('updateProgressContainer').classList.add('active');
            document.getElementById('updateProgressText').style.display = 'block';
            document.getElementById('editBtnText').style.display = 'none';
            document.getElementById('editBtnSpinner').style.display = 'inline';
            document.getElementById('updateArtworkBtn').disabled = true;
            document.getElementById('editCancelBtn').disabled = true;
            
            // Disable all form inputs
            const formInputs = document.querySelectorAll('#editArtworkForm input, #editArtworkForm select, #editArtworkForm textarea');
            formInputs.forEach(input => input.disabled = true);
        }

        function hideUpdateProgress() {
            document.getElementById('updateProgressContainer').classList.remove('active');
            document.getElementById('updateProgressText').style.display = 'none';
            document.getElementById('updateStatus').classList.remove('active');
            document.getElementById('editBtnText').style.display = 'inline';
            document.getElementById('editBtnSpinner').style.display = 'none';
            document.getElementById('updateArtworkBtn').disabled = false;
            document.getElementById('editCancelBtn').disabled = false;
            
            // Re-enable all form inputs
            const formInputs = document.querySelectorAll('#editArtworkForm input, #editArtworkForm select, #editArtworkForm textarea');
            formInputs.forEach(input => input.disabled = false);
            
            // Reset progress
            updateProgress(0);
        }

        function updateProgress(percentage) {
            const progressBar = document.getElementById('updateProgressBar');
            const progressText = document.getElementById('updateProgressText');
            
            progressBar.style.width = percentage + '%';
            progressText.textContent = `${percentage}% Complete`;
            
            if (percentage > 0) {
                progressBar.classList.add('animated');
            } else {
                progressBar.classList.remove('animated');
            }
        }

        function updateProgressStatus(type, message) {
            const statusElement = document.getElementById('updateStatus');
            statusElement.className = `update-status active ${type}`;
            statusElement.innerHTML = type === 'uploading' || type === 'processing' 
                ? `<span class="loading-spinner"></span>${message}`
                : message;
        }

        // Add New Artwork Functions
        function openAddArtworkModal() {
            document.getElementById('addArtworkModal').classList.add('active');
            // Clear form
            document.getElementById('addArtworkForm').reset();
            document.getElementById('addImagePreview').style.display = 'none';
            document.getElementById('addImagePreview').classList.add('empty');
            document.getElementById('addImagePreview').querySelector('span').style.display = 'block';
            document.getElementById('addImagePreview').querySelector('span').textContent = 'No image selected';
            hideAddProgress();
        }

        function closeAddArtworkModal() {
            document.getElementById('addArtworkModal').classList.remove('active');
            hideAddProgress();
        }

        function previewAddArtworkImage(input) {
            const preview = document.getElementById('addImagePreview');
            const previewImage = document.getElementById('addPreviewImage');
            
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    previewImage.src = e.target.result;
                    previewImage.style.display = 'block';
                    preview.classList.remove('empty');
                    preview.querySelector('span').style.display = 'none';
                };
                
                reader.readAsDataURL(input.files[0]);
            } else {
                previewImage.style.display = 'none';
                preview.classList.add('empty');
                preview.querySelector('span').style.display = 'block';
                preview.querySelector('span').textContent = 'No image selected';
            }
        }

        // Handle add artwork form submission
        document.getElementById('addArtworkForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Show progress bar and disable form
            showAddProgress();
            
            // Create FormData object to handle file upload
            const formData = new FormData();
            formData.append('art_name', document.getElementById('add_art_name').value);
            formData.append('artist_unique_id', document.getElementById('add_artist_unique_id').value);
            formData.append('art_category', document.getElementById('add_art_category').value);
            formData.append('cost', document.getElementById('add_cost').value);
            formData.append('size_of_art', document.getElementById('add_size_of_art').value);
            formData.append('work_hours', document.getElementById('add_work_hours').value);
            formData.append('color_type', document.getElementById('add_color_type').value);
            formData.append('status', document.getElementById('add_status').value);
            formData.append('art_description', document.getElementById('add_art_description').value);
            
            // Add artwork image file (required)
            const artworkImageFile = document.getElementById('add_art_image').files[0];
            if (artworkImageFile) {
                formData.append('art_image', artworkImageFile);
                updateAddProgressStatus('uploading', 'Uploading artwork image...');
            } else {
                updateAddProgressStatus('processing', 'Creating new artwork...');
            }

            // Simulate progress steps
            updateAddProgress(20);
            
            setTimeout(() => {
                updateAddProgress(50);
                
                fetch('/admin/artworks', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    updateAddProgress(80);
                    return response.json();
                })
                .then(data => {
                    updateAddProgress(100);
                    updateAddProgressStatus('success', 'Artwork created successfully!');
                    
                    setTimeout(() => {
                        if (data.success) {
                            showAlert(data.success, 'success');
                            closeAddArtworkModal();
                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        } else {
                            hideAddProgress();
                            showAlert(data.error || 'Error creating artwork', 'error');
                        }
                    }, 500);
                })
                .catch(error => {
                    console.error('Error creating artwork:', error);
                    hideAddProgress();
                    showAlert('Error creating artwork', 'error');
                });
            }, 300);
        });

        // Add Progress bar functions
        function showAddProgress() {
            document.getElementById('addProgressContainer').classList.add('active');
            document.getElementById('addProgressText').style.display = 'block';
            document.getElementById('addBtnText').style.display = 'none';
            document.getElementById('addBtnSpinner').style.display = 'inline';
            document.getElementById('addArtworkBtn').disabled = true;
            document.getElementById('addCancelBtn').disabled = true;
            
            // Disable all form inputs
            const formInputs = document.querySelectorAll('#addArtworkForm input, #addArtworkForm select, #addArtworkForm textarea');
            formInputs.forEach(input => input.disabled = true);
        }

        function hideAddProgress() {
            document.getElementById('addProgressContainer').classList.remove('active');
            document.getElementById('addProgressText').style.display = 'none';
            document.getElementById('addStatus').classList.remove('active');
            document.getElementById('addBtnText').style.display = 'inline';
            document.getElementById('addBtnSpinner').style.display = 'none';
            document.getElementById('addArtworkBtn').disabled = false;
            document.getElementById('addCancelBtn').disabled = false;
            
            // Re-enable all form inputs
            const formInputs = document.querySelectorAll('#addArtworkForm input, #addArtworkForm select, #addArtworkForm textarea');
            formInputs.forEach(input => input.disabled = false);
            
            // Reset progress
            updateAddProgress(0);
        }

        function updateAddProgress(percentage) {
            const progressBar = document.getElementById('addProgressBar');
            const progressText = document.getElementById('addProgressText');
            
            progressBar.style.width = percentage + '%';
            progressText.textContent = `${percentage}% Complete`;
            
            if (percentage > 0) {
                progressBar.classList.add('animated');
            } else {
                progressBar.classList.remove('animated');
            }
        }

        function updateAddProgressStatus(type, message) {
            const statusElement = document.getElementById('addStatus');
            statusElement.className = `update-status active ${type}`;
            statusElement.innerHTML = type === 'uploading' || type === 'processing' 
                ? `<span class="loading-spinner"></span>${message}`
                : message;
        }

        function deleteArtwork(artworkId, artworkName) {
            if (confirm(`Are you sure you want to delete the artwork "${artworkName}"? This action cannot be undone.`)) {
                fetch(`/admin/artworks/${artworkId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showAlert(data.success, 'success');
                        // Remove the artwork card from DOM
                        const artworkCard = document.querySelector(`[data-id="${artworkId}"]`);
                        if (artworkCard) {
                            artworkCard.style.transition = 'all 0.3s ease';
                            artworkCard.style.opacity = '0';
                            artworkCard.style.transform = 'scale(0.8)';
                            setTimeout(() => {
                                artworkCard.remove();
                                // Reload to update stats
                                setTimeout(() => window.location.reload(), 1000);
                            }, 300);
                        }
                    } else {
                        showAlert(data.error || 'Error deleting artwork', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error deleting artwork:', error);
                    showAlert('Error deleting artwork', 'error');
                });
            }
        }

        function showAlert(message, type) {
            // Remove existing alerts
            const existingAlerts = document.querySelectorAll('.alert');
            existingAlerts.forEach(alert => alert.remove());
            
            // Create new alert
            const alert = document.createElement('div');
            alert.className = `alert ${type}`;
            alert.textContent = message;
            
            // Insert after header
            const header = document.querySelector('.header');
            header.insertAdjacentElement('afterend', alert);
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.style.opacity = '0';
                    alert.style.transform = 'translateY(-20px)';
                    setTimeout(() => alert.remove(), 300);
                }
            }, 5000);
        }

        // Close modals when clicking outside
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('modal')) {
                if (e.target.id === 'editArtworkModal') {
                    closeEditArtworkModal();
                } else if (e.target.id === 'addArtworkModal') {
                    closeAddArtworkModal();
                }
            }
        });

        // Close modals with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeEditArtworkModal();
                closeAddArtworkModal();
            }
        });

        // Sidebar toggle functionality
        const menuToggle = document.getElementById('menuToggle');
        const sidebar = document.getElementById('sidebar');
        const sidebarOverlay = document.getElementById('sidebarOverlay');

        menuToggle.addEventListener('click', function() {
            sidebar.classList.toggle('active');
            sidebarOverlay.classList.toggle('active');
        });

        sidebarOverlay.addEventListener('click', function() {
            sidebar.classList.remove('active');
            sidebarOverlay.classList.remove('active');
        });

        // Auto-hide alerts
        setTimeout(() => {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                if (alert) {
                    alert.style.opacity = '0';
                    alert.style.transform = 'translateY(-10px)';
                    setTimeout(() => alert.remove(), 300);
                }
            });
        }, 5000);
    </script>
</body>
</html>
