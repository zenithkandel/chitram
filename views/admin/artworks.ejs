<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡§ö‡§ø‡§§‡•ç‡§∞‡§Æ‡•ç - Artworks Management</title>
    <link rel="stylesheet" href="/css/pages/admin-common.css">
    <link rel="stylesheet" href="/css/pages/admin-artworks.css">
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h2>‡§ö‡§ø‡§§‡•ç‡§∞‡§Æ‡•ç</h2>
            <p>Art Management System</p>
        </div>
        <nav class="sidebar-nav">
            <div class="nav-item">
                <a href="/admin/dashboard" class="nav-link">
                    <span class="nav-icon">üìä</span>
                    Dashboard
                </a>
            </div>
            <div class="nav-item">
                <a href="/admin/artists" class="nav-link">
                    <span class="nav-icon">üë®‚Äçüé®</span>
                    Artists
                </a>
            </div>
            <div class="nav-item">
                <a href="/admin/artworks" class="nav-link active">
                    <span class="nav-icon">üé®</span>
                    Artworks
                </a>
            </div>
            <div class="nav-item">
                <a href="/admin/orders" class="nav-link">
                    <span class="nav-icon">üì¶</span>
                    Orders
                </a>
            </div>
            <div class="nav-item">
                <a href="/admin/messages" class="nav-link">
                    <span class="nav-icon">üìß</span>
                    Messages
                </a>
            </div>
            <div class="nav-item">
                <a href="/admin/applications" class="nav-link">
                    <span class="nav-icon">üìù</span>
                    Applications
                </a>
            </div>
        </nav>
    </div>

    <!-- Overlay for mobile -->
    <div class="sidebar-overlay" id="sidebarOverlay"></div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <header class="header">
            <button class="menu-toggle" id="menuToggle">‚ò∞</button>
            <h1 class="header-title">üé® Artworks Management</h1>
            <a href="/admin/logout" class="logout-btn">Logout</a>
        </header>

        <!-- Artworks Content -->
        <div class="artworks-content">
            <% if (error) { %>
                <div class="alert error" id="errorAlert">
                    <%= error %>
                </div>
            <% } %>

            <% if (success) { %>
                <div class="alert success" id="successAlert">
                    <%= success %>
                </div>
            <% } %>

            <!-- Artworks Stats -->
            <div class="artists-stats-section">
                <div class="stats-header">
                    <h2 class="stats-title">Artworks Overview</h2>
                    <button class="add-artwork-btn" onclick="openAddArtworkModal()">
                        + Add New Artwork
                    </button>
                </div>

                <div class="artists-stats">
                    <div class="stat-card">
                        <div class="stat-number"><%= artworks.filter(a => a.status === 'listed').length %></div>
                        <div class="stat-label">Listed Artworks</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number"><%= artworks.filter(a => a.status === 'ordered').length %></div>
                        <div class="stat-label">Ordered Artworks</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number"><%= artworks.filter(a => a.status === 'sold').length %></div>
                        <div class="stat-label">Sold Artworks</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number"><%= artworks.length %></div>
                        <div class="stat-label">Total Artworks</div>
                    </div>
                </div>
            </div>

            <!-- Search and Filter Section -->
            <div class="admin-search-filter-section">
                <div class="search-filter-header">
                    <h3>Search & Filter Artworks</h3>
                </div>
                
                <div class="admin-gallery-controls">
                    <!-- Search Bar -->
                    <div class="admin-search-container">
                        <div class="admin-search-bar">
                            <input type="text" 
                                   id="adminArtworkSearchInput" 
                                   placeholder="Search artworks, artists, categories, or descriptions..." 
                                   autocomplete="off">
                            <button type="button" id="adminArtworkSearchBtn" class="admin-search-button">
                                <span id="adminArtworkSearchIcon">üîç</span>
                                <span id="adminArtworkSearchSpinner" class="admin-loading-spinner initially-hidden"></span>
                            </button>
                        </div>
                    </div>

                    <!-- Filter Section -->
                    <div class="admin-filter-container">
                        <div class="admin-filter-group">
                            <label for="adminSortBy">Sort by:</label>
                            <select id="adminSortBy" class="admin-filter-select">
                                <option value="date_newest">Date: Newest First</option>
                                <option value="date_oldest">Date: Oldest First</option>
                                <option value="price_low_high">Price: Low to High</option>
                                <option value="price_high_low">Price: High to Low</option>
                                <option value="name_a_z">Name: A to Z</option>
                                <option value="name_z_a">Name: Z to A</option>
                            </select>
                        </div>

                        <div class="admin-filter-group">
                            <label for="adminCategoryFilter">Category:</label>
                            <select id="adminCategoryFilter" class="admin-filter-select">
                                <option value="all">All Categories</option>
                                <!-- Categories will be loaded dynamically -->
                            </select>
                        </div>

                        <div class="admin-filter-group">
                            <label for="adminStatusFilter">Status:</label>
                            <select id="adminStatusFilter" class="admin-filter-select">
                                <option value="all">All Statuses</option>
                                <option value="listed">Listed</option>
                                <option value="ordered">Ordered</option>
                                <option value="sold">Sold</option>
                                <option value="delivered">Delivered</option>
                            </select>
                        </div>

                        <button type="button" id="adminArtworkResetBtn" class="admin-reset-button">Reset Filters</button>
                        <button type="button" id="adminArtworkClearBtn" class="admin-clear-button initially-hidden">Clear Search</button>
                    </div>
                </div>
            </div>

            <!-- Artworks Grid -->
            <div class="artworks-container">
                <div class="artworks-grid" id="adminArtworksContainer">
                    <% if (artworks.length === 0) { %>
                        <div class="artwork-card empty-state">
                            <h3>No artworks found</h3>
                            <p class="muted-2">Start by adding your first artwork!</p>
                        </div>
                    <% } else { %>
                        <% artworks.forEach(artwork => { %>
                            <div class="artwork-card" data-id="<%= artwork.unique_id %>">
                                <div class="artwork-image <%= artwork.art_image ? '' : 'no-image' %>">
                                    <% if (artwork.art_image) { %>
                                        <img src="/uploads/artworks/<%= artwork.art_image %>" alt="<%= artwork.art_name %>">
                                    <% } else { %>
                                        üñºÔ∏è No Image
                                    <% } %>
                                </div>
                                
                                <div class="artwork-info">
                                    <h3><%= artwork.art_name %></h3>
                                    
                                    <div class="artwork-details">
                                        <div class="detail-item">
                                            <span class="detail-label">Artist</span>
                                            <span class="detail-value"><%= artwork.artist_name || 'Unknown' %></span>
                                        </div>
                                        <div class="detail-item">
                                            <span class="detail-label">Category</span>
                                            <span class="detail-value"><%= artwork.art_category %></span>
                                        </div>
                                        <div class="detail-item">
                                            <span class="detail-label">Price</span>
                                            <span class="detail-value">Rs. <%= Number(artwork.cost).toLocaleString() %></span>
                                        </div>
                                        <div class="detail-item">
                                            <span class="detail-label">Status</span>
                                            <span class="status-badge status-<%= artwork.status %>"><%= artwork.status %></span>
                                        </div>
                                        <div class="detail-item">
                                            <span class="detail-label">Size</span>
                                            <span class="detail-value"><%= artwork.size_of_art || 'N/A' %></span>
                                        </div>
                                        <div class="detail-item">
                                            <span class="detail-label">Color Type</span>
                                            <span class="detail-value"><%= artwork.color_type === 'black_and_white' ? 'B&W' : 'Color' %></span>
                                        </div>
                                    </div>
                                    
                                    <% if (artwork.art_description) { %>
                                        <p class="muted text-sm">
                                            <%= artwork.art_description.substring(0, 100) %><%= artwork.art_description.length > 100 ? '...' : '' %>
                                        </p>
                                    <% } %>
                                </div>

                                <div class="artwork-actions">
                                    <button class="btn btn-edit" onclick="editArtwork('<%= artwork.unique_id %>')">
                                        ‚úèÔ∏è Edit
                                    </button>
                                    <button class="btn btn-delete" onclick="deleteArtwork('<%= artwork.unique_id %>', '<%= artwork.art_name %>')">
                                        üóëÔ∏è Delete
                                    </button>
                                </div>
                            </div>
                        <% }); %>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Artwork Modal -->
    <div id="editArtworkModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Edit Artwork</h2>
                <button class="close-btn" onclick="closeEditArtworkModal()">&times;</button>
            </div>
            
            <form id="editArtworkForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="edit_art_name">Artwork Name *</label>
                        <input type="text" id="edit_art_name" name="art_name" required>
                    </div>
                    <div class="form-group">
                        <label for="edit_artist_unique_id">Artist *</label>
                        <select id="edit_artist_unique_id" name="artist_unique_id" required>
                            <option value="">Loading artists...</option>
                        </select>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="edit_art_category">Category *</label>
                        <select id="edit_art_category" name="art_category" required>
                            <option value="">Select Category</option>
                            <option value="Landscape">Landscape</option>
                            <option value="Portrait">Portrait</option>
                            <option value="Abstract">Abstract</option>
                            <option value="Still Life">Still Life</option>
                            <option value="Traditional">Traditional</option>
                            <option value="Modern">Modern</option>
                            <option value="Digital">Digital</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="edit_cost">Price (Rs.) *</label>
                        <input type="number" id="edit_cost" name="cost" min="0" step="0.01" required>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="edit_size_of_art">Size of Art</label>
                        <input type="text" id="edit_size_of_art" name="size_of_art" placeholder="e.g., 16x20 inches">
                    </div>
                    <div class="form-group">
                        <label for="edit_work_hours">Work Hours</label>
                        <input type="text" id="edit_work_hours" name="work_hours" placeholder="e.g., 15-20 hours">
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="edit_color_type">Color Type *</label>
                        <select id="edit_color_type" name="color_type" required>
                            <option value="color">Color</option>
                            <option value="black_and_white">Black & White</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="edit_status">Status</label>
                        <select id="edit_status" name="status">
                            <option value="listed">Listed</option>
                            <option value="ordered">Ordered</option>
                            <option value="sold">Sold</option>
                            <option value="delivered">Delivered</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label for="edit_art_description">Description</label>
                    <textarea id="edit_art_description" name="art_description" rows="3" placeholder="Describe the artwork..."></textarea>
                </div>

                <div class="image-upload">
                    <label for="edit_art_image">Artwork Image</label>
                    <input type="file" id="edit_art_image" name="art_image" accept="image/*" onchange="previewEditArtworkImage(this)">
                    <div id="editImagePreview" class="image-preview empty">
                        <span>No image selected</span>
                        <img id="editPreviewImage" class="initially-hidden">
                    </div>
                </div>

                <div id="updateProgressContainer" class="progress-container">
                    <div class="progress-bar">
                        <div id="updateProgressBar" class="progress-fill"></div>
                    </div>
                    <div id="updateProgressText" class="progress-text">0% Complete</div>
                    <div id="updateStatus" class="update-status"></div>
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn-secondary" id="editCancelBtn" onclick="closeEditArtworkModal()">Cancel</button>
                    <button type="submit" class="btn-primary" id="updateArtworkBtn">
                        <span id="editBtnText">Update Artwork</span>
                        <span id="editBtnSpinner" class="loading-spinner initially-hidden"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Add Artwork Modal -->
    <div id="addArtworkModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Add New Artwork</h2>
                <button class="close-btn" onclick="closeAddArtworkModal()">&times;</button>
            </div>
            
            <form id="addArtworkForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="add_art_name">Artwork Name *</label>
                        <input type="text" id="add_art_name" name="art_name" required>
                    </div>
                    <div class="form-group">
                        <label for="add_artist_unique_id">Artist *</label>
                        <select id="add_artist_unique_id" name="artist_unique_id" required>
                            <option value="">Loading artists...</option>
                        </select>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="add_art_category">Category *</label>
                        <select id="add_art_category" name="art_category" required>
                            <option value="">Select Category</option>
                            <option value="Landscape">Landscape</option>
                            <option value="Portrait">Portrait</option>
                            <option value="Abstract">Abstract</option>
                            <option value="Still Life">Still Life</option>
                            <option value="Traditional">Traditional</option>
                            <option value="Modern">Modern</option>
                            <option value="Digital">Digital</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="add_cost">Price (Rs.) *</label>
                        <input type="number" id="add_cost" name="cost" min="0" step="0.01" required>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="add_size_of_art">Size of Art</label>
                        <input type="text" id="add_size_of_art" name="size_of_art" placeholder="e.g., 16x20 inches">
                    </div>
                    <div class="form-group">
                        <label for="add_work_hours">Work Hours</label>
                        <input type="text" id="add_work_hours" name="work_hours" placeholder="e.g., 15-20 hours">
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="add_color_type">Color Type *</label>
                        <select id="add_color_type" name="color_type" required>
                            <option value="color">Color</option>
                            <option value="black_and_white">Black & White</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="add_status">Status</label>
                        <select id="add_status" name="status">
                            <option value="listed">Listed</option>
                            <option value="ordered">Ordered</option>
                            <option value="sold">Sold</option>
                            <option value="delivered">Delivered</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label for="add_art_description">Description</label>
                    <textarea id="add_art_description" name="art_description" rows="3" placeholder="Describe the artwork..."></textarea>
                </div>

                <div class="image-upload">
                    <label for="add_art_image">Artwork Image *</label>
                    <input type="file" id="add_art_image" name="art_image" accept="image/*" required onchange="previewAddArtworkImage(this)">
                    <div id="addImagePreview" class="image-preview empty">
                        <span>No image selected</span>
                        <img id="addPreviewImage" class="initially-hidden">
                    </div>
                </div>

                <div id="addProgressContainer" class="progress-container">
                    <div class="progress-bar">
                        <div id="addProgressBar" class="progress-fill"></div>
                    </div>
                    <div id="addProgressText" class="progress-text">0% Complete</div>
                    <div id="addStatus" class="update-status"></div>
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn-secondary" id="addCancelBtn" onclick="closeAddArtworkModal()">Cancel</button>
                    <button type="submit" class="btn-primary" id="addArtworkBtn">
                        <span id="addBtnText">Add Artwork</span>
                        <span id="addBtnSpinner" class="loading-spinner initially-hidden"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Auto-hide alerts
        setTimeout(() => {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                if (alert) {
                    alert.style.opacity = '0';
                    alert.style.transform = 'translateY(-20px)';
                    setTimeout(() => alert.remove(), 300);
                }
            });
        }, 5000);

        // Global variables
        let currentArtworkId = null;

        // Load artists for dropdowns
        async function loadArtists() {
            try {
                const response = await fetch('/admin/artworks/api/artists');
                const data = await response.json();
                
                if (data.artists) {
                    const editSelect = document.getElementById('edit_artist_unique_id');
                    const addSelect = document.getElementById('add_artist_unique_id');
                    
                    // Clear existing options
                    editSelect.innerHTML = '<option value="">Select Artist</option>';
                    addSelect.innerHTML = '<option value="">Select Artist</option>';
                    
                    // Add artist options
                    data.artists.forEach(artist => {
                        const option1 = new Option(artist.full_name, artist.unique_id);
                        const option2 = new Option(artist.full_name, artist.unique_id);
                        editSelect.add(option1);
                        addSelect.add(option2);
                    });
                } else {
                    console.error('No artists found');
                }
            } catch (error) {
                console.error('Error loading artists:', error);
            }
        }

        // Load artists on page load
        document.addEventListener('DOMContentLoaded', loadArtists);

        // Admin Artwork Search and Filter functionality
        let adminArtworkSearchTimeout;
        let originalArtworksHTML = '';

        // Store original content on page load
        document.addEventListener('DOMContentLoaded', function() {
            originalArtworksHTML = document.getElementById('adminArtworksContainer').innerHTML;
            
            // Load categories for filter dropdown
            loadAdminArtCategories();
            
            // Set up event listeners
            setupAdminArtworkSearchListeners();
        });

        // Load categories for admin filter dropdown
        async function loadAdminArtCategories() {
            try {
                const response = await fetch('/admin/artworks/categories');
                const data = await response.json();
                
                if (data.categories) {
                    const categorySelect = document.getElementById('adminCategoryFilter');
                    
                    // Clear existing options except 'All Categories'
                    categorySelect.innerHTML = '<option value="all">All Categories</option>';
                    
                    // Add category options
                    data.categories.forEach(category => {
                        const option = new Option(category, category);
                        categorySelect.add(option);
                    });
                }
            } catch (error) {
                console.error('Error loading categories:', error);
            }
        }

        // Set up event listeners for search and filter
        function setupAdminArtworkSearchListeners() {
            const searchInput = document.getElementById('adminArtworkSearchInput');
            const searchBtn = document.getElementById('adminArtworkSearchBtn');
            const clearBtn = document.getElementById('adminArtworkClearBtn');
            const resetBtn = document.getElementById('adminArtworkResetBtn');
            const sortBy = document.getElementById('adminSortBy');
            const categoryFilter = document.getElementById('adminCategoryFilter');
            const statusFilter = document.getElementById('adminStatusFilter');
            
            // Search on input with debounce
            searchInput.addEventListener('input', function() {
                clearTimeout(adminArtworkSearchTimeout);
                adminArtworkSearchTimeout = setTimeout(() => {
                    adminSearchAndFilterArtworks();
                }, 300);
            });
            
            // Search on button click
            searchBtn.addEventListener('click', function() {
                clearTimeout(adminArtworkSearchTimeout);
                adminSearchAndFilterArtworks();
            });
            
            // Search on Enter key
            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    clearTimeout(adminArtworkSearchTimeout);
                    adminSearchAndFilterArtworks();
                }
            });
            
            // Filter on dropdown change
            sortBy.addEventListener('change', adminSearchAndFilterArtworks);
            categoryFilter.addEventListener('change', adminSearchAndFilterArtworks);
            statusFilter.addEventListener('change', adminSearchAndFilterArtworks);
            
            // Clear search
            clearBtn.addEventListener('click', clearAdminArtworkSearch);
            
            // Reset all filters
            resetBtn.addEventListener('click', resetAdminArtworkFilters);
        }

        // Main search and filter function
        async function adminSearchAndFilterArtworks() {
            const searchInput = document.getElementById('adminArtworkSearchInput');
            const searchBtn = document.getElementById('adminArtworkSearchBtn');
            const searchIcon = document.getElementById('adminArtworkSearchIcon');
            const searchSpinner = document.getElementById('adminArtworkSearchSpinner');
            const clearBtn = document.getElementById('adminArtworkClearBtn');
            const sortBy = document.getElementById('adminSortBy');
            const categoryFilter = document.getElementById('adminCategoryFilter');
            const statusFilter = document.getElementById('adminStatusFilter');
            const artworksContainer = document.getElementById('adminArtworksContainer');
            
            // Show loading state
            searchIcon.style.display = 'none';
            searchSpinner.style.display = 'inline-block';
            searchBtn.disabled = true;
            
            // Show/hide clear button
            if (searchInput.value.trim()) {
                clearBtn.style.display = 'block';
            } else {
                clearBtn.style.display = 'none';
            }
            
            try {
                const params = new URLSearchParams({
                    q: searchInput.value || '',
                    sortBy: sortBy.value || 'date_newest',
                    category: categoryFilter.value || 'all',
                    status: statusFilter.value || 'all'
                });
                
                const response = await fetch(`/admin/artworks/search?${params}`);
                const data = await response.json();
                
                if (data.artworks) {
                    updateAdminArtworksDisplay(data.artworks);
                } else {
                    console.error('Search error:', data.error);
                    artworksContainer.innerHTML = `
                        <div class="empty-state"><p>Error searching artworks. Please try again.</p></div>
                    `;
                }
            } catch (error) {
                console.error('Search error:', error);
                artworksContainer.innerHTML = `
                    <div class="empty-state"><p>Error searching artworks. Please try again.</p></div>
                `;
            } finally {
                // Reset button state
                searchIcon.style.display = 'inline-block';
                searchSpinner.style.display = 'none';
                searchBtn.disabled = false;
            }
        }

        // Update artworks display with search results
        function updateAdminArtworksDisplay(artworks) {
            const artworksContainer = document.getElementById('adminArtworksContainer');
            
            if (artworks.length === 0) {
                artworksContainer.innerHTML = `
                    <div class="empty-state">
                        <h3>No artworks found</h3>
                        <p class="muted-2">Try adjusting your search or filter criteria.</p>
                    </div>
                `;
                return;
            }
            
            let artworksHTML = '';
            artworks.forEach(artwork => {
                const imageHTML = artwork.art_image 
                    ? `<img src="/uploads/artworks/${artwork.art_image}" alt="${artwork.art_name}">`
                    : 'üñºÔ∏è No Image';
                
                const description = artwork.art_description 
                    ? `<p class="description-text text-sm">
                           ${artwork.art_description.substring(0, 100)}${artwork.art_description.length > 100 ? '...' : ''}
                       </p>`
                    : '';
                
                artworksHTML += `
                    <div class="artwork-card" data-id="${artwork.unique_id}">
                        <div class="artwork-image ${artwork.art_image ? '' : 'no-image'}">
                            ${imageHTML}
                        </div>
                        
                        <div class="artwork-info">
                            <h3>${artwork.art_name}</h3>
                            
                            <div class="artwork-details">
                                <div class="detail-item">
                                    <span class="detail-label">Artist</span>
                                    <span class="detail-value">${artwork.artist_name || 'Unknown'}</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Category</span>
                                    <span class="detail-value">${artwork.art_category}</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Price</span>
                                    <span class="detail-value">Rs. ${Number(artwork.cost).toLocaleString()}</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Status</span>
                                    <span class="status-badge status-${artwork.status}">${artwork.status}</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Size</span>
                                    <span class="detail-value">${artwork.size_of_art || 'N/A'}</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Color Type</span>
                                    <span class="detail-value">${artwork.color_type === 'black_and_white' ? 'B&W' : 'Color'}</span>
                                </div>
                            </div>
                            
                            ${description}
                        </div>

                        <div class="artwork-actions">
                            <button class="action-btn view-btn" onclick="viewArtwork(${artwork.unique_id})">
                                üëÅÔ∏è View
                            </button>
                            <button class="action-btn edit-btn" onclick="editArtwork(${artwork.unique_id})">
                                ‚úèÔ∏è Edit
                            </button>
                            <button class="action-btn delete-btn" onclick="deleteArtwork(${artwork.unique_id})">
                                üóëÔ∏è Delete
                            </button>
                        </div>
                    </div>
                `;
            });
            
            artworksContainer.innerHTML = artworksHTML;
        }

        // Clear search function
        function clearAdminArtworkSearch() {
            document.getElementById('adminArtworkSearchInput').value = '';
            document.getElementById('adminArtworkClearBtn').style.display = 'none';
            adminSearchAndFilterArtworks();
        }

        // Reset all filters function
        function resetAdminArtworkFilters() {
            document.getElementById('adminArtworkSearchInput').value = '';
            document.getElementById('adminSortBy').value = 'date_newest';
            document.getElementById('adminCategoryFilter').value = 'all';
            document.getElementById('adminStatusFilter').value = 'all';
            document.getElementById('adminArtworkClearBtn').style.display = 'none';
            
            // Restore original content
            const artworksContainer = document.getElementById('adminArtworksContainer');
            artworksContainer.innerHTML = originalArtworksHTML;
        }

        // Edit artwork function
        async function editArtwork(artworkId) {
            currentArtworkId = artworkId;
            
            try {
                const response = await fetch(`/admin/artworks/${artworkId}`);
                const data = await response.json();
                
                if (data.artwork) {
                    const artwork = data.artwork;
                    
                    // Fill form fields
                    document.getElementById('edit_art_name').value = artwork.art_name || '';
                    document.getElementById('edit_artist_unique_id').value = artwork.artist_unique_id || '';
                    document.getElementById('edit_art_category').value = artwork.art_category || '';
                    document.getElementById('edit_cost').value = artwork.cost || '';
                    document.getElementById('edit_size_of_art').value = artwork.size_of_art || '';
                    document.getElementById('edit_work_hours').value = artwork.work_hours || '';
                    document.getElementById('edit_color_type').value = artwork.color_type || 'color';
                    document.getElementById('edit_status').value = artwork.status || 'listed';
                    document.getElementById('edit_art_description').value = artwork.art_description || '';
                    
                    // Show existing image if available
                    const preview = document.getElementById('editImagePreview');
                    const previewImage = document.getElementById('editPreviewImage');
                    
                    if (artwork.art_image) {
                        previewImage.src = `/uploads/artworks/${artwork.art_image}`;
                        previewImage.style.display = 'block';
                        preview.classList.remove('empty');
                        preview.querySelector('span').style.display = 'none';
                    } else {
                        previewImage.style.display = 'none';
                        preview.classList.add('empty');
                        preview.querySelector('span').style.display = 'block';
                        preview.querySelector('span').textContent = 'No image available';
                    }
                    
                    // Show modal
                    document.getElementById('editArtworkModal').classList.add('active');
                } else {
                    showAlert('Error loading artwork data', 'error');
                }
            } catch (error) {
                console.error('Error fetching artwork:', error);
                showAlert('Error loading artwork data', 'error');
            }
        }

        function closeEditArtworkModal() {
            document.getElementById('editArtworkModal').classList.remove('active');
            hideUpdateProgress();
        }

        function previewEditArtworkImage(input) {
            const preview = document.getElementById('editImagePreview');
            const previewImage = document.getElementById('editPreviewImage');
            
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    previewImage.src = e.target.result;
                    previewImage.style.display = 'block';
                    preview.classList.remove('empty');
                    preview.querySelector('span').style.display = 'none';
                };
                
                reader.readAsDataURL(input.files[0]);
            } else {
                previewImage.style.display = 'none';
                preview.classList.add('empty');
                preview.querySelector('span').style.display = 'block';
                preview.querySelector('span').textContent = 'No image selected';
            }
        }

        // Handle edit artwork form submission
        document.getElementById('editArtworkForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            if (!currentArtworkId) {
                showAlert('No artwork selected for editing', 'error');
                return;
            }
            
            // Show progress bar and disable form
            showUpdateProgress();
            
            // Create FormData object to handle file upload
            const formData = new FormData();
            formData.append('art_name', document.getElementById('edit_art_name').value);
            formData.append('artist_unique_id', document.getElementById('edit_artist_unique_id').value);
            formData.append('art_category', document.getElementById('edit_art_category').value);
            formData.append('cost', document.getElementById('edit_cost').value);
            formData.append('size_of_art', document.getElementById('edit_size_of_art').value);
            formData.append('work_hours', document.getElementById('edit_work_hours').value);
            formData.append('color_type', document.getElementById('edit_color_type').value);
            formData.append('status', document.getElementById('edit_status').value);
            formData.append('art_description', document.getElementById('edit_art_description').value);
            
            // Add artwork image file if selected
            const artworkImageFile = document.getElementById('edit_art_image').files[0];
            if (artworkImageFile) {
                formData.append('art_image', artworkImageFile);
                updateProgressStatus('uploading', 'Uploading artwork image...');
            } else {
                updateProgressStatus('processing', 'Updating artwork...');
            }

            // Simulate progress steps
            updateProgress(20);
            
            setTimeout(() => {
                updateProgress(50);
                
                fetch(`/admin/artworks/${currentArtworkId}`, {
                    method: 'PUT',
                    body: formData
                })
                .then(response => {
                    updateProgress(80);
                    return response.json();
                })
                .then(data => {
                    updateProgress(100);
                    updateProgressStatus('success', 'Artwork updated successfully!');
                    
                    setTimeout(() => {
                        if (data.success) {
                            showAlert(data.success, 'success');
                            closeEditArtworkModal();
                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        } else {
                            hideUpdateProgress();
                            showAlert(data.error || 'Error updating artwork', 'error');
                        }
                    }, 500);
                })
                .catch(error => {
                    console.error('Error updating artwork:', error);
                    hideUpdateProgress();
                    showAlert('Error updating artwork', 'error');
                });
            }, 300);
        });

        // Progress bar functions
        function showUpdateProgress() {
            document.getElementById('updateProgressContainer').classList.add('active');
            document.getElementById('updateProgressText').style.display = 'block';
            document.getElementById('editBtnText').style.display = 'none';
            document.getElementById('editBtnSpinner').style.display = 'inline';
            document.getElementById('updateArtworkBtn').disabled = true;
            document.getElementById('editCancelBtn').disabled = true;
            
            // Disable all form inputs
            const formInputs = document.querySelectorAll('#editArtworkForm input, #editArtworkForm select, #editArtworkForm textarea');
            formInputs.forEach(input => input.disabled = true);
        }

        function hideUpdateProgress() {
            document.getElementById('updateProgressContainer').classList.remove('active');
            document.getElementById('updateProgressText').style.display = 'none';
            document.getElementById('updateStatus').classList.remove('active');
            document.getElementById('editBtnText').style.display = 'inline';
            document.getElementById('editBtnSpinner').style.display = 'none';
            document.getElementById('updateArtworkBtn').disabled = false;
            document.getElementById('editCancelBtn').disabled = false;
            
            // Re-enable all form inputs
            const formInputs = document.querySelectorAll('#editArtworkForm input, #editArtworkForm select, #editArtworkForm textarea');
            formInputs.forEach(input => input.disabled = false);
            
            // Reset progress
            updateProgress(0);
        }

        function updateProgress(percentage) {
            const progressBar = document.getElementById('updateProgressBar');
            const progressText = document.getElementById('updateProgressText');
            
            progressBar.style.width = percentage + '%';
            progressText.textContent = `${percentage}% Complete`;
            
            if (percentage > 0) {
                progressBar.classList.add('animated');
            } else {
                progressBar.classList.remove('animated');
            }
        }

        function updateProgressStatus(type, message) {
            const statusElement = document.getElementById('updateStatus');
            statusElement.className = `update-status active ${type}`;
            statusElement.innerHTML = type === 'uploading' || type === 'processing' 
                ? `<span class="loading-spinner"></span>${message}`
                : message;
        }

        // Add New Artwork Functions
        function openAddArtworkModal() {
            document.getElementById('addArtworkModal').classList.add('active');
            // Clear form
            document.getElementById('addArtworkForm').reset();
            document.getElementById('addImagePreview').style.display = 'none';
            document.getElementById('addImagePreview').classList.add('empty');
            document.getElementById('addImagePreview').querySelector('span').style.display = 'block';
            document.getElementById('addImagePreview').querySelector('span').textContent = 'No image selected';
            hideAddProgress();
        }

        function closeAddArtworkModal() {
            document.getElementById('addArtworkModal').classList.remove('active');
            hideAddProgress();
        }

        function previewAddArtworkImage(input) {
            const preview = document.getElementById('addImagePreview');
            const previewImage = document.getElementById('addPreviewImage');
            
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    previewImage.src = e.target.result;
                    previewImage.style.display = 'block';
                    preview.classList.remove('empty');
                    preview.querySelector('span').style.display = 'none';
                };
                
                reader.readAsDataURL(input.files[0]);
            } else {
                previewImage.style.display = 'none';
                preview.classList.add('empty');
                preview.querySelector('span').style.display = 'block';
                preview.querySelector('span').textContent = 'No image selected';
            }
        }

        // Handle add artwork form submission
        document.getElementById('addArtworkForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Show progress bar and disable form
            showAddProgress();
            
            // Create FormData object to handle file upload
            const formData = new FormData();
            formData.append('art_name', document.getElementById('add_art_name').value);
            formData.append('artist_unique_id', document.getElementById('add_artist_unique_id').value);
            formData.append('art_category', document.getElementById('add_art_category').value);
            formData.append('cost', document.getElementById('add_cost').value);
            formData.append('size_of_art', document.getElementById('add_size_of_art').value);
            formData.append('work_hours', document.getElementById('add_work_hours').value);
            formData.append('color_type', document.getElementById('add_color_type').value);
            formData.append('status', document.getElementById('add_status').value);
            formData.append('art_description', document.getElementById('add_art_description').value);
            
            // Add artwork image file (required)
            const artworkImageFile = document.getElementById('add_art_image').files[0];
            if (artworkImageFile) {
                formData.append('art_image', artworkImageFile);
                updateAddProgressStatus('uploading', 'Uploading artwork image...');
            } else {
                updateAddProgressStatus('processing', 'Creating new artwork...');
            }

            // Simulate progress steps
            updateAddProgress(20);
            
            setTimeout(() => {
                updateAddProgress(50);
                
                fetch('/admin/artworks', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    updateAddProgress(80);
                    return response.json();
                })
                .then(data => {
                    updateAddProgress(100);
                    updateAddProgressStatus('success', 'Artwork created successfully!');
                    
                    setTimeout(() => {
                        if (data.success) {
                            showAlert(data.success, 'success');
                            closeAddArtworkModal();
                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        } else {
                            hideAddProgress();
                            showAlert(data.error || 'Error creating artwork', 'error');
                        }
                    }, 500);
                })
                .catch(error => {
                    console.error('Error creating artwork:', error);
                    hideAddProgress();
                    showAlert('Error creating artwork', 'error');
                });
            }, 300);
        });

        // Add Progress bar functions
        function showAddProgress() {
            document.getElementById('addProgressContainer').classList.add('active');
            document.getElementById('addProgressText').style.display = 'block';
            document.getElementById('addBtnText').style.display = 'none';
            document.getElementById('addBtnSpinner').style.display = 'inline';
            document.getElementById('addArtworkBtn').disabled = true;
            document.getElementById('addCancelBtn').disabled = true;
            
            // Disable all form inputs
            const formInputs = document.querySelectorAll('#addArtworkForm input, #addArtworkForm select, #addArtworkForm textarea');
            formInputs.forEach(input => input.disabled = true);
        }

        function hideAddProgress() {
            document.getElementById('addProgressContainer').classList.remove('active');
            document.getElementById('addProgressText').style.display = 'none';
            document.getElementById('addStatus').classList.remove('active');
            document.getElementById('addBtnText').style.display = 'inline';
            document.getElementById('addBtnSpinner').style.display = 'none';
            document.getElementById('addArtworkBtn').disabled = false;
            document.getElementById('addCancelBtn').disabled = false;
            
            // Re-enable all form inputs
            const formInputs = document.querySelectorAll('#addArtworkForm input, #addArtworkForm select, #addArtworkForm textarea');
            formInputs.forEach(input => input.disabled = false);
            
            // Reset progress
            updateAddProgress(0);
        }

        function updateAddProgress(percentage) {
            const progressBar = document.getElementById('addProgressBar');
            const progressText = document.getElementById('addProgressText');
            
            progressBar.style.width = percentage + '%';
            progressText.textContent = `${percentage}% Complete`;
            
            if (percentage > 0) {
                progressBar.classList.add('animated');
            } else {
                progressBar.classList.remove('animated');
            }
        }

        function updateAddProgressStatus(type, message) {
            const statusElement = document.getElementById('addStatus');
            statusElement.className = `update-status active ${type}`;
            statusElement.innerHTML = type === 'uploading' || type === 'processing' 
                ? `<span class="loading-spinner"></span>${message}`
                : message;
        }

        function deleteArtwork(artworkId, artworkName) {
            if (confirm(`Are you sure you want to delete the artwork "${artworkName}"? This action cannot be undone.`)) {
                fetch(`/admin/artworks/${artworkId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showAlert(data.success, 'success');
                        // Remove the artwork card from DOM
                        const artworkCard = document.querySelector(`[data-id="${artworkId}"]`);
                        if (artworkCard) {
                            artworkCard.style.transition = 'all 0.3s ease';
                            artworkCard.style.opacity = '0';
                            artworkCard.style.transform = 'scale(0.8)';
                            setTimeout(() => {
                                artworkCard.remove();
                                // Reload to update stats
                                setTimeout(() => window.location.reload(), 1000);
                            }, 300);
                        }
                    } else {
                        showAlert(data.error || 'Error deleting artwork', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error deleting artwork:', error);
                    showAlert('Error deleting artwork', 'error');
                });
            }
        }

        function showAlert(message, type) {
            // Remove existing alerts
            const existingAlerts = document.querySelectorAll('.alert');
            existingAlerts.forEach(alert => alert.remove());
            
            // Create new alert
            const alert = document.createElement('div');
            alert.className = `alert ${type}`;
            alert.textContent = message;
            
            // Insert after header
            const header = document.querySelector('.header');
            header.insertAdjacentElement('afterend', alert);
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.style.opacity = '0';
                    alert.style.transform = 'translateY(-20px)';
                    setTimeout(() => alert.remove(), 300);
                }
            }, 5000);
        }

        // Close modals when clicking outside
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('modal')) {
                if (e.target.id === 'editArtworkModal') {
                    closeEditArtworkModal();
                } else if (e.target.id === 'addArtworkModal') {
                    closeAddArtworkModal();
                }
            }
        });

        // Close modals with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeEditArtworkModal();
                closeAddArtworkModal();
            }
        });

        // Sidebar toggle functionality
        const menuToggle = document.getElementById('menuToggle');
        const sidebar = document.getElementById('sidebar');
        const sidebarOverlay = document.getElementById('sidebarOverlay');

        menuToggle.addEventListener('click', function() {
            sidebar.classList.toggle('active');
            sidebarOverlay.classList.toggle('active');
        });

        sidebarOverlay.addEventListener('click', function() {
            sidebar.classList.remove('active');
            sidebarOverlay.classList.remove('active');
        });

        // Auto-hide alerts
        setTimeout(() => {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                if (alert) {
                    alert.style.opacity = '0';
                    alert.style.transform = 'translateY(-10px)';
                    setTimeout(() => alert.remove(), 300);
                }
            });
        }, 5000);
    </script>
</body>
</html>
